version: "3.8"

services:
  # =========================
  # MySQL 8 (binlog ON)
  # =========================
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports: ["3306:3306"]
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: application
      MYSQL_PASSWORD: application
      MYSQL_DATABASE: hhplus
    command:
      [
        "--server-id=223344",
        "--log-bin=mysql-bin",
        "--binlog_format=ROW",
        "--binlog_row_image=FULL",
        "--binlog_expire_logs_seconds=86400",
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_general_ci"
      ]
    volumes:
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/init:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks: [app-net]

  # =========================
  # Redis (단일 노드)
  # =========================
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379" # 로컬 접속용. 스프링 앱은 도커 네트워크 이름 'redis:6379'로 붙음
    command: ["redis-server", "--appendonly", "yes"] # 영속성(AOF) 유지
    volumes:
      - ./data/redis:/data                    # 데이터 영속화
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: [app-net]

  # =========================
  # Redis 초기 데이터 시드
  # =========================
  redis-init:
    image: redis:7
    container_name: redis-init
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./redis/init:/opt/redis-init
    entrypoint: ["/bin/sh","-c","chmod +x /opt/redis-init/seed.sh && /opt/redis-init/seed.sh"]
    networks: [app-net]
    restart: "no"   # 원샷 컨테이너

  # =========================
  # Kafka (KRaft 단일 노드)
  # =========================
  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"   # 호스트 접근용
      - "29092:29092" # 도커 내부 접근용
      - "29093:29093" # 컨트롤러
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:29093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092,CONTROLLER://:29093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:29092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s
    networks: [app-net]

  # =========================
  # Kafka Connect (Debezium)
  # =========================
  connect:
    image: quay.io/debezium/connect:2.5
    container_name: connect
    ports: ["8083:8083"]
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      PLUGIN_PATH: /kafka/connect
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8083/connector-plugins || wget -qO- http://localhost:8083/connector-plugins"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s
    networks: [app-net]

  # (원샷) 커넥터 자동 등록
  connect-init:
    image: curlimages/curl:8.9.1
    container_name: connect-init
    depends_on:
      connect:
        condition: service_healthy
    volumes:
      - ./connect:/opt/connect
    entrypoint: ["/bin/sh","-c","set -e; sed -i 's/\\r$//' /opt/connect/register-outbox.sh /opt/connect/outbox-connector.json; chmod +x /opt/connect/register-outbox.sh || true; /bin/sh /opt/connect/register-outbox.sh"]
    networks: [app-net]

  # =========================
  # Spring Boot App
  # =========================
  spring-app:
    build:
      context: .
      dockerfile: ./docker/spring-app/Dockerfile
    container_name: spring-app
    ports: ["8080:8080"]
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      connect:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks: [app-net]

  # =========================
  # K6 부하테스트
  # =========================
  k6:
    image: grafana/k6
    container_name: k6
    volumes:
      - ./k6:/scripts         # 로컬 ./k6 폴더 → 컨테이너 /scripts
    working_dir: /scripts
    networks:
      - app-net
    # 기본 실행 명령어는 안 적어두고, 필요할 때 override 가능
    entrypoint: ["k6"]

networks:
  app-net:
    driver: bridge

volumes:
  mysql_data:
  kafka_data: